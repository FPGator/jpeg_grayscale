%% JPEG IMAGE COMPRESSION FOR GRAYSCALE IMAGE
close all;
fclose all;

%% GET INPUT IMAGE
[filename, pathname] = uigetfile('*.bmp;*.tif;*.jpg;*.pgm','Pick an M-file');

input_image  = imread(filename);
[rows,columns, ColorChannels] = size(input_image);

if ColorChannels > 1
    input_image = rgb2gray(input_image);
end

figure(1);imshow(input_image);title('Original Image');
input_image = double(input_image);

%% Quality Matrix Formulation

quality = input('Enter Compression Quality - ');

Q50 = [ 16 11 10 16 24 40 51 61;
     12 12 14 19 26 58 60 55;
     14 13 16 24 40 57 69 56;
     14 17 22 29 51 87 80 62; 
     18 22 37 56 68 109 103 77;
     24 35 55 64 81 104 113 92;
     49 64 78 87 103 121 120 101;
     72 92 95 98 112 100 103 99];
 
 if quality > 50
     QX = round(Q50.*(ones(8)*((100-quality)/50)));
     QX = uint8(QX);
 elseif quality < 50
     QX = round(Q50.*(ones(8)*(50/quality)));
     QX = uint8(QX);
 elseif quality == 50
     QX = Q50;
 end
 
%% Formulation of forward DCT Matrix and inverse DCT matrix

DCT_matrix8 = dct(eye(8));
iDCT_matrix8 = DCT_matrix8';   %inv(DCT_matrix8);

% Jpeg Compression

dct_restored = zeros(rows,columns);
QX = double(QX);

%% Jpeg Encoding

% Forward Discrete Cosine Transform

for i1=(1:8:rows)
    for i2=(1:8:columns)
        zBLOCK=input_image(i1:i1+7,i2:i2+7);
        win1=DCT_matrix8*zBLOCK*iDCT_matrix8;
        dct_domain(i1:i1+7,i2:i2+7)=win1;
    end
end

% Quantization of the DCT coefficients
for i1=(1:8:rows)
    for i2=(1:8:columns)
        win1 = dct_domain(i1:i1+7,i2:i2+7);
        win2=round(win1./QX);
        dct_quantized(i1:i1+7,i2:i2+7)=win2;
    end
end

%% Jpeg Decoding 

% Dequantization of DCT Coefficients
for i1=(1:8:rows)
    for i2=(1:8:columns)
        win2 = dct_quantized(i1:i1+7,i2:i2+7);
        win3 = win2.*QX;
        dct_dequantized(i1:i1+7,i2:i2+7) = win3;
    end
end

% Inverse DISCRETE COSINE TRANSFORM
for i1=(1:8:rows)
    for i2=(1:8:columns)
        win3 = dct_dequantized(i1:i1+7,i2:i2+7);
        win4=iDCT_matrix8*win3*DCT_matrix8;
        dct_restored(i1:i1+7,i2:i2+7)=win4;
    end
end
I2=dct_restored;

%% Conversion of Image Matrix to Intensity image
compressed_image = mat2gray(I2);

%Display of Results
figure(2);imshow(compressed_image);title('Restored Image');

%% Image Compression Ratio, RMS, PSNR

oi_bytes = (rows*columns*8);

compressed_image_size = whos('compressed_image');
jpeg_recon_bytes = getfield(compressed_image_size,'bytes');

jpeg_comp_ratio = oi_bytes / jpeg_recon_bytes;

jpeg_rms = immse(input_image, compressed_image);
jpeg_psnr = 20*log10(255/jpeg_rms);
